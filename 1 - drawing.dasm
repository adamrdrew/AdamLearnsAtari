; Drawing the Player 0 sprite
; Everything about the VCS is weird and drawing is no exception. We don't have a display buffer so we can't
; draw off screen; we can't even draw a whole sprite at a time. With the VCS all we ever have is a single scanline at a time
; so rather than draw a sprite in the classic way, we instead need to draw slices of the sprite on the correct scanlines
; and it is as bad as it sounds
;
; In order to pull this off we need to track a few things:
; 1. What scanline are we on?
; 2. What scanline should we start drawing the sprite on?
; 3. What slice or line of the sprite are we on?
;
; We've already got our scanline counter in Y so that's good. But we'll need  a couple of variables so 
; PlayerSpriteY will store the scanline we start drawing the sprite at and SpriteSliceToDraw will hold our current slice
; PlayerSpriteY will be modified by movement code and SpriteSliceToDraw will be set to 0 every VBlank
;
; On each scanline we'll check to see if our current scanline (Y Register) is equal to PlayerSpriteY. If it is then 
; we'll set SpriteSliceToDraw to the height of the sprite, in this case 8. 
; We'll check the value of SpriteSliceToDraw and if its 0 skip the draw code. If its not zero we'll draw the slice
; and decrement SpriteSliceToDraw

	processor 6502
	include vcs.h
	include macro.h
	org $F000

ScanlineCount = $80
VBlankTimer = $81
OverscanTimer = $82

PlayerSpriteY = $83;
SpriteSliceToDraw = $84;

Start
	CLEAN_START
	lda #$AA
	sta COLUBK
	lda #$34
	sta COLUP0

	lda #192
	sta ScanlineCount
	lda #43
	sta VBlankTimer
	lda #35
	sta OverscanTimer
	lda #75
	sta PlayerSpriteY
	lda #0
	sta SpriteSliceToDraw

VSync
	sta WSYNC
	lda #%0010
	sta VSYNC
	sta WSYNC
	sta WSYNC
	sta WSYNC
	lda #0
	sta VSYNC

VBlankStart
	lda #%0010
	sta VBLANK
	lda VBlankTimer
	sta TIM64T

VBlankLogic
	;Do vblank stuff here
	ldy ScanlineCount
	;Set the number of lines of player sprite to draw to 0
	;this ensures we skip drawing until the right time
	lda #0
	sta SpriteSliceToDraw

VBlankEnd
	lda INTIM
	bne VBlankEnd
	lda #0
	sta VBLANK
	sta WSYNC


HBlank
	;Do pre-line stuff here
	sta WSYNC
	

DrawScanLine

SetPlayerSpriteDrawOffset
	;By default draw nothing in the player 0 register
	lda #0
	sta GRP0
	;See if this is the line we should draw at
	cpy PlayerSpriteY
	;If it isn't the line we should start drawing the player sprite at move on
	bne DrawPlayerSprite
	;If it is the line we should start drawing at set the lines of sprite to draw to 8
	lda #8
	sta SpriteSliceToDraw


DrawPlayerSprite
	;Load the sprite line count
	ldx SpriteSliceToDraw
	cpx #0
	;If the line count is 0 there's nothing to draw so skip drawing
	beq AfterPlayerSprite
	;Load the sprite line to draw and draw it
	lda SpriteFace-1,X
	sta GRP0
	;Decrement and store the sprite draw line
	dex
	stx SpriteSliceToDraw

AfterPlayerSprite

FinishScanline
	dey
	bne HBlank

OverscanStart
	lda #%0010
	sta VBLANK
	lda OverscanTimer
	sta TIM64T

OverscanLogic
	;Do overscan stuff here

OverscanEnd
	lda INTIM
	bne OverscanEnd
	lda #0
	sta VBLANK
	sta WSYNC
	jmp VSync
	
SpriteFace
	.byte %01111110
	.byte %11000011
	.byte %10111101
	.byte %11111111
	.byte %10011001
	.byte %10011001
	.byte %11111111
	.byte %01111110

	org $FFFC
	.word Start
	.word Start
